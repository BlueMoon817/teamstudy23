import App from './App.js';

window.addEventListener('load', function(){
  const app = new App();
  app.init();
  app.render();
});


/*
공룡게임 알고리즘

1. background 
   - 배경은 캔버스자체
   - 배경 요소1 : 구름 - 5가지의 x 간격과 5가지의 y간격이 믹스되어 출현
   - 새와 겹칠 수 있고 겹치면 새가 구름 위에 그려져야함.

   - 배경 요소2: 땅 - 이미지 2장이 연달아서 왼쪽으로 천천히 이동.

2. player
   플레이가 시작되면 공룡이 하늘에서 뚝 떨어진당 ㅎ 
   처음 플레이어의 속도는 키보드를 누를 타이밍을 벌기 위해 중간 속도로 2~3초 유지시켜준다.

   * 정지이미지 : 점프 & → 방향키를 안누를때 
   * 달리는 이미지 : → 방향키 또는 → 방향키 + 스페이스바(점프하며 앞으로) 
   * 엎드리며 달리기 : ↓방향키 + → 방향키
   * 죽는이미지 : 
      - 화면 바깥으로 사라진경우
      - 장애물(선인장, 새)과 부딪친 경우

   * 키 기능 
     1 )  → 방향키를 누르지 않으면 뒤로 밀려난다.
     2)  → 방향키를 일정시간 누르고 있으면 빨라지며 유지할 수 있는 최대 x 좌표가 있다.
     3)  → 방향키 + 점프(스페이스바)는 속도가 유지된다.
     4)  점프(스페이스바)만 하면 속도가 일정하게 줄어든다.
     5)  ↑방향키와 스페이스바를 함께 누르면 좀 더 빠르게 높게 뛴다.
     6)  ↑방향키만 누르는 것은 아무런 효과가 없다.  

3. 장애물 
 - 선인장과 새는 따로 출현한다.
 - 선인장의 최대 높이는 플레이어가 → 방향키 + 점프(스페이스바)로 넘을 수 있어야 한다.
 - 새의 y는 플레이어가 엎드릴 공간이 있거나 뛰어넘을 수 있는 높이 사이의 랜덤한 값이다. 
 - 장애물이 왼쪽으로 이동하는 속도는
    플레이어가 앞으로 가며 뛰는 속도여야 넘을 수 있는 경우
    제자리에서 정지한채로 뛰어야하는 경우 두가지이다.

4. Score
 - 시간을 거리로 환산하여 m로 표시한다. 


5. 스크린
 - Start 스크린 - 플레이 버튼 / Game Over스크린 3초후 Replay 로 텍스트 변경 및 버튼 출현

*/